package com.lyb.ucenter.service.impl;

import com.google.gson.Gson;
import com.lyb.common.constants.ResultCodeEnum;
import com.lyb.common.exception.CustomizeException;
import com.lyb.ucenter.constants.WxAppConstants;
import com.lyb.ucenter.entity.Member;
import com.lyb.ucenter.service.LoginService;
import com.lyb.ucenter.service.MemberService;
import com.lyb.ucenter.util.HttpClientUtils;
import com.lyb.ucenter.util.JWTUtils;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.UUID;

/**
 * @author liuyoubin
 * @since 2020/1/20 - 20:03
 */
@Service
public class LoginServiceImpl implements LoginService {

    private final MemberService memberService;

    public LoginServiceImpl(MemberService memberService) {
        this.memberService = memberService;
    }

    @Override
    public String loginConnect(HttpServletRequest request) {

        HttpSession session = request.getSession();

        System.out.println("SessionId="+session.getId());

        // 微信开放平台授权baseUrl
        String baseUrl = "https://open.weixin.qq.com/connect/qrconnect" +
                "?appid=%s" +
                "&redirect_uri=%s" +
                "&response_type=code" +
                "&scope=snsapi_login" +
                "&state=%s" +
                "#wechat_redirect";

        //回调地址
        String redirectUrl = WxAppConstants.WX_OPEN_REDIRECT_URL;
        try {
            redirectUrl = URLEncoder.encode(redirectUrl, "UTF-8");//url编码
        } catch (UnsupportedEncodingException e) {
            throw new CustomizeException(ResultCodeEnum.URL_ENCODE_ERROR);
        }

        // 防止csrf攻击（跨站请求伪造攻击）
        String state = UUID.randomUUID().toString().replaceAll("-", "");
        session.setAttribute("wx-open-state", state);


        //生成并返回 wxLoginUrl
        return String.format(baseUrl,
                WxAppConstants.WX_OPEN_APP_ID,
                redirectUrl,
                state);
    }


    @Override
    public String loginAndGetJwt(String code, String state, HttpServletRequest request, HttpServletResponse response) {

        HttpSession session = request.getSession();

        System.out.println("SessionId="+session.getId());

        //判断state是否合法,防止跨站请求伪造攻击
        String beforeState = (String) session.getAttribute("wx-open-state");
        if(StringUtils.isEmpty(code)||StringUtils.isEmpty(beforeState)||!state.equals(beforeState)){
            throw new CustomizeException(ResultCodeEnum.ILLEGAL_CALLBACK_REQUEST_ERROR);
        }

        //通过code获取access_token
        String baseAccessTokenUrl = "https://api.weixin.qq.com/sns/oauth2/access_token" +
                "?appid=%s" +
                "&secret=%s" +
                "&code=%s" +
                "&grant_type=authorization_code";

        String accessTokenUrl = String.format(baseAccessTokenUrl,
                WxAppConstants.WX_OPEN_APP_ID,
                WxAppConstants.WX_OPEN_APP_SECRET,
                code);

        String result;
        try {
            //发送请求，获取AccessToken
            result = HttpClientUtils.get(accessTokenUrl);
        } catch (Exception e) {
            throw new CustomizeException(ResultCodeEnum.FETCH_ACCESS_TOKEN_FAIL);
        }

        Gson gson = new Gson();
        HashMap resultMap = gson.fromJson(result, HashMap.class);
        if(resultMap.get("errcode")!=null){
            throw new CustomizeException(ResultCodeEnum.FETCH_ACCESS_TOKEN_FAIL);
        }

        String accessToken = (String) resultMap.get("access_token");
        String openid = (String) resultMap.get("openid");

        if (StringUtils.isEmpty(accessToken) || StringUtils.isEmpty(openid)) {
            throw new CustomizeException(ResultCodeEnum.FETCH_ACCESS_TOKEN_FAIL);
        }

        //根据openId返回用户信息
        Member member = memberService.getByOpenId(openid);

        if(member==null){//新用户

            //从微信获取用户信息
            //获取用户基本信息
            String baseUserInfoUrl = "https://api.weixin.qq.com/sns/userinfo" +
                    "?access_token=%s" +
                    "&openid=%s";

            String userInfoUrl = String.format(baseUserInfoUrl, accessToken, openid);

            //获取用户信息
            String resultUserInfo;

            try {
                resultUserInfo = HttpClientUtils.get(userInfoUrl);
            } catch (Exception e) {
                throw new CustomizeException(ResultCodeEnum.FETCH_USER_INFO_FAIL);
            }

            HashMap resultUserInfoMap = gson.fromJson(resultUserInfo, HashMap.class);

            if(resultUserInfoMap.get("errcode")!=null){
                throw new CustomizeException(ResultCodeEnum.FETCH_USER_INFO_FAIL);
            }

            //保存用户信息
            String nickname = (String)resultUserInfoMap.get("nickname");
            String headimgurl = (String)resultUserInfoMap.get("headimgurl");
            Integer sex = (Integer) resultUserInfoMap.get("sex");
            member = new Member();
            member.setNickname(nickname);
            member.setOpenid(openid);
            member.setAvatar(headimgurl);
            member.setSex(sex);
            memberService.save(member);

        }

        //生成jwt
        String jwt_token = JWTUtils.geneJsonWebToken(member);

        if(jwt_token==null){
            throw new CustomizeException(ResultCodeEnum.USER_LOGIN_INFO_NOT_EXIST);
        }
        return  jwt_token;
    }

}
