package com.lyb.ucenter.api;

import com.google.gson.Gson;
import com.lyb.common.constants.ResultCodeEnum;
import com.lyb.common.exception.CustomizeException;
import com.lyb.common.vo.R;
import com.lyb.ucenter.entity.Member;
import com.lyb.ucenter.service.LoginService;
import com.lyb.ucenter.service.MemberService;
import com.lyb.ucenter.util.CookieUtils;
import com.lyb.ucenter.vo.LoginInfo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.UUID;


/**
 * @author liuyoubin
 * @since 2020/1/18 - 18:40
 */
@CrossOrigin
@Controller
@RequestMapping("/api/ucenter/wx")
public class WxApiController {

    private final MemberService memberService;

    private final LoginService loginService;

    public WxApiController(LoginService loginService, MemberService memberService) {
        this.loginService = loginService;
        this.memberService = memberService;
    }

    /**
     * 登陆接口,返回微信登陆界面地址
     * @param request Request对象
     * @return 返回微信登陆界面地址
     */
    @GetMapping("/login")
    public String loginConnect(HttpServletRequest request){

        String  wxLoginUrl = loginService.loginConnect(request);

        return "redirect:"+wxLoginUrl;
    }

    /**
     * 登陆回调接口
     * @param code 授权临时票据code
     * @param state 用于验证,防止伪造攻击
     * @return 重定向首页地址
     */
    @GetMapping("/callback")
    public String callback(String code, String state, HttpSession session,
                           HttpServletRequest request, HttpServletResponse response){

        //完成登陆流程,返回用户登陆jwt
        String jwt_token = loginService.loginAndGetJwt(code,state,request,response);

        //存入Cookie,超时时间30分钟
        CookieUtils.setCookie(request, response, "jwt_token", jwt_token, 60*30, false);

        //重定向到首页
        return "redirect:http://localhost:3000";

    }

    /**
     * 解析JwtToken,获取用户登陆信息
     * @param jwtToken jwtToken
     * @return 用户信息对象
     */
    @ResponseBody
    @PostMapping("/parseJwt")
    public R getLoginInfoByJwtToken(@RequestBody String jwtToken){

        System.out.println(jwtToken);

        LoginInfo loginInfo = memberService.getLoginInfoByJwtToken(jwtToken);

        return R.ok().data("loginInfo",loginInfo);

    }


    @GetMapping("get-jwt")
    @ResponseBody
    public R getJwt(HttpServletRequest request) {
        String guliJwtToken = CookieUtils.getCookieValue(request, "jwt_token");
        return R.ok().data("jwt_token", guliJwtToken);
    }

}
