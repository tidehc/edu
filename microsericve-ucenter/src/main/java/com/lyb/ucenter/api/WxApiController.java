package com.lyb.ucenter.api;

import com.google.gson.Gson;
import com.lyb.common.constants.ResultCodeEnum;
import com.lyb.common.exception.CustomizeException;
import com.lyb.ucenter.entity.Member;
import com.lyb.ucenter.service.MemberService;
import com.lyb.ucenter.util.ConstantPropertiesUtil;
import com.lyb.ucenter.util.HttpClientUtils;
import io.swagger.models.auth.In;
import org.apache.http.HttpResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.server.Session;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.UUID;


/**
 * @author liuyoubin
 * @since 2020/1/18 - 18:40
 */
@CrossOrigin
@Controller
@RequestMapping("/api/ucenter/wx")
public class WxApiController {

    @Autowired
    private MemberService memberService;

    /**
     * 登陆接口,返回微信登陆界面地址
     * @param session Session对象
     * @return 返回微信登陆界面地址
     */
    @GetMapping("/login")
    public String loginConnect(HttpSession session){

        System.out.println("SessionId="+session.getId());

        // 微信开放平台授权baseUrl
        String baseUrl = "https://open.weixin.qq.com/connect/qrconnect" +
        "?appid=%s" +
        "&redirect_uri=%s" +
        "&response_type=code" +
        "&scope=snsapi_login" +
        "&state=%s" +
        "#wechat_redirect";

        //回调地址
        String redirectUrl = ConstantPropertiesUtil.WX_OPEN_REDIRECT_URL;
        try {
            redirectUrl = URLEncoder.encode(redirectUrl, "UTF-8");//url编码
        } catch (UnsupportedEncodingException e) {
            throw new CustomizeException(ResultCodeEnum.URL_ENCODE_ERROR);
        }

        // 防止csrf攻击（跨站请求伪造攻击）
        //String state = UUID.randomUUID().toString().replaceAll("-", "");
        String state = "mike";//ngrok的前置域名
        session.setAttribute("wx-open-state", state);

        //生成codeUrl
        String codeUrl = String.format(baseUrl,
                ConstantPropertiesUtil.WX_OPEN_APP_ID,
                redirectUrl,
                state);
        return "redirect:"+codeUrl;
    }

    /**
     * 登陆回调接口
     * @param code 授权临时票据code
     * @param state 用于验证,防止伪造 攻击
     * @param session Session对象
     * @return
     */
    @GetMapping("/callback")
    public String callback(String code, String state,HttpSession session){

        System.out.println("SessionId="+session.getId());

        System.out.println(code);
        System.out.println(state);
        //判断state是否合法

        //String beforeState = (String) session.getAttribute("wx-open-state");
        //System.out.println(beforeState);
        //||StringUtils.isEmpty(beforeState)||!state.equals(beforeState)
        if(StringUtils.isEmpty(code)){
            throw new CustomizeException(ResultCodeEnum.ILLEGAL_CALLBACK_REQUEST_ERROR);
        }

        //通过code获取access_token
        String baseAccessTokenUrl = "https://api.weixin.qq.com/sns/oauth2/access_token" +
        "?appid=%s" +
        "&secret=%s" +
        "&code=%s" +
        "&grant_type=authorization_code";

        String accessTokenUrl = String.format(baseAccessTokenUrl,
                ConstantPropertiesUtil.WX_OPEN_APP_ID,
                ConstantPropertiesUtil.WX_OPEN_APP_SECRET,
                code);

        String result;
        try {
            //发送请求，获取AccessToken
            result = HttpClientUtils.get(accessTokenUrl);
        } catch (Exception e) {
            throw new CustomizeException(ResultCodeEnum.FETCH_ACCESSTOKEN_FAILD);
        }

        Gson gson = new Gson();
        HashMap resultMap = gson.fromJson(result, HashMap.class);
        if(resultMap.get("errcode")!=null){
            throw new CustomizeException(ResultCodeEnum.FETCH_ACCESSTOKEN_FAILD);
        }

        String accessToken = (String) resultMap.get("access_token");
        String openid = (String) resultMap.get("openid");

        if (StringUtils.isEmpty(accessToken) || StringUtils.isEmpty(openid)) {
            throw new CustomizeException(ResultCodeEnum.FETCH_ACCESSTOKEN_FAILD);
        }

        //根据openId返回用户信息
        Member member = memberService.getByOpenId(openid);

        if(member==null){//新用户

            //从微信获取用户信息
            //获取用户基本信息
            String baseUserInfoUrl = "https://api.weixin.qq.com/sns/userinfo" +
            "?access_token=%s" +
            "&openid=%s";

            String userInfoUrl = String.format(baseUserInfoUrl, accessToken, openid);

            //获取用户信息
            String resultUserInfo;

            try {
                resultUserInfo = HttpClientUtils.get(userInfoUrl);
            } catch (Exception e) {
                throw new CustomizeException(ResultCodeEnum.FETCH_USER_INFO_FAILD);
            }

            HashMap resultUserInfoMap = gson.fromJson(resultUserInfo, HashMap.class);

            if(resultUserInfoMap.get("errcode")!=null){
                throw new CustomizeException(ResultCodeEnum.FETCH_USER_INFO_FAILD);
            }

            //保存用户信息
            String nickname = (String)resultUserInfoMap.get("nickname");
            String headimgurl = (String)resultUserInfoMap.get("headimgurl");
            Integer sex = (Integer) resultUserInfoMap.get("sex");
            member = new Member();
            member.setNickname(nickname);
            member.setOpenid(openid);
            member.setAvatar(headimgurl);
            member.setSex(sex);
            memberService.save(member);

        }

        return "redirect:http://localhost:3000";

    }



}
