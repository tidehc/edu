package com.lyb.ucenter.util;

import lombok.extern.slf4j.Slf4j;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;

/**
 * @author liuyoubin
 * @since 2020/1/19 - 22:36
 * Cookie工具类
 */
@Slf4j
public class CookieUtils {

    /**
     * 得到指定Cookie的值,不进行URL UTF-8解码
     * @param request request对象
     * @param cookieName cookie名称(key)
     * @return cookie对应的值
     */
    public static String getCookieValue(HttpServletRequest request,String cookieName){
        return getCookieValue(request, cookieName,false);
    }

    /**
     * 到指定Cookie的值
     * @param request request对象
     * @param cookieName  cookie名称(key)
     * @param isDecoder 是否进行URL UTF-8解码
     * @return cookie对应的值
     */
    public static  String getCookieValue(HttpServletRequest request,String cookieName,boolean isDecoder){

        Cookie[] cookies = request.getCookies();

        if(cookieName==null||cookies==null){
            return null;
        }

        //指定cookie的值
        String value = null;
        try{
            for (Cookie cookie : cookies) {
                if(cookie.getName().equals(cookieName)){
                    if(isDecoder){
                        value = URLDecoder.decode(cookie.getValue(), "UTF-8");
                    }else{
                        value = cookie.getValue();
                    }
                }
            }
        }catch (UnsupportedEncodingException e){
            log.error(e.getMessage());
        }

        return value;

    }

    /**
     * 到指定Cookie的值
     * @param request request对象
     * @param cookieName  cookie名称(key)
     * @param encodeMethod URL 解码方式
     * @return cookie对应的值
     */
    public static  String getCookieValue(HttpServletRequest request,String cookieName,String encodeMethod){

        Cookie[] cookies = request.getCookies();

        if(cookieName==null||cookies==null){
            return null;
        }

        //指定cookie的值
        String value = null;
        try{
            for (Cookie cookie : cookies) {
                if(cookie.getName().equals(cookieName)){
                    value = URLDecoder.decode(cookie.getValue(), encodeMethod);
                }
            }
        }catch (UnsupportedEncodingException e){
            log.error(e.getMessage());
        }

        return value;

    }

    /**
     * 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response,String cookieName,String cookieValue){
        setCookie(request, response, cookieName, cookieValue, -1);
    }

    /**
     * 设置Cookie的值 在指定时间内生效,但不编码
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue, int cookieMaxTime) {
        setCookie(request, response, cookieName, cookieValue, cookieMaxTime, false);
    }

    /**
     * 设置Cookie的值 不设置生效时间,但编码
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue, boolean isEncode) {
        setCookie(request, response, cookieName, cookieValue, -1, isEncode);
    }


    /**
     * 设置Cookie的值 在指定时间内生效, 编码参数
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue, int cookieMaxTime, boolean isEncode) {
        doSetCookie(request, response, cookieName, cookieValue, cookieMaxTime, isEncode);
    }

    /**
     * 设置Cookie的值 在指定时间内生效, 编码参数(指定编码)
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue, int cookieMaxTime, String encodeString) {
        doSetCookie(request, response, cookieName, cookieValue, cookieMaxTime, encodeString);
    }

    /**
     * 删除Cookie带cookie域名
     */
    public static void deleteCookie(HttpServletRequest request, HttpServletResponse response,
                                    String cookieName) {
        doSetCookie(request, response, cookieName, "", -1, false);
    }

    /**
     * 设置Cookie的值，并使其在指定时间内生效
     *
     * @param cookieMaxTime cookie生效的最大秒数
     */
    private static void doSetCookie(HttpServletRequest request, HttpServletResponse response,
                                    String cookieName, String cookieValue, int cookieMaxTime, boolean isEncode) {
        try {
            if (cookieValue == null) {
                cookieValue = "";
            } else if (isEncode) {
                cookieValue = URLEncoder.encode(cookieValue, "utf-8");
            }
            Cookie cookie = new Cookie(cookieName, cookieValue);
            if (cookieMaxTime > 0)
                cookie.setMaxAge(cookieMaxTime);
            if (null != request) {// 设置域名的cookie
                String domainName = getDomainName(request);
                System.out.println(domainName);
                if (!"localhost".equals(domainName)) {
                    cookie.setDomain(domainName);
                }
            }
            cookie.setPath("/");
            response.addCookie(cookie);
        } catch (Exception e) {
            log.error(e.getMessage());
        }
    }

    /**
     * 设置Cookie的值，并使其在指定时间内生效
     *
     * @param cookieMaxTime cookie生效的最大秒数
     */
    private static void doSetCookie(HttpServletRequest request, HttpServletResponse response,
                                    String cookieName, String cookieValue, int cookieMaxTime, String encodeString) {
        try {
            if (cookieValue == null) {
                cookieValue = "";
            } else {
                cookieValue = URLEncoder.encode(cookieValue, encodeString);
            }
            Cookie cookie = new Cookie(cookieName, cookieValue);
            if (cookieMaxTime > 0)
                cookie.setMaxAge(cookieMaxTime);
            if (null != request) {// 设置域名的cookie
                String domainName = getDomainName(request);
                System.out.println(domainName);
                if (!"localhost".equals(domainName)) {
                    cookie.setDomain(domainName);
                }
            }
            cookie.setPath("/");
            response.addCookie(cookie);
        } catch (Exception e) {
            log.error(e.getMessage());
        }
    }

    /**
     * 得到cookie的域名
     */
    private static String getDomainName(HttpServletRequest request) {
        String domainName ;

        String serverName = request.getRequestURL().toString();
        if (serverName.equals("")) {
            domainName = "";
        } else {
            serverName = serverName.toLowerCase();
            serverName = serverName.substring(7);
            final int end = serverName.indexOf("/");
            serverName = serverName.substring(0, end);
            final String[] domains = serverName.split("\\.");
            int len = domains.length;
            if (len > 3) {
                // www.xxx.com.cn
                domainName = "." + domains[len - 3] + "." + domains[len - 2] + "." + domains[len - 1];
            } else if (len > 1) {
                // xxx.com or xxx.cn
                domainName = "." + domains[len - 2] + "." + domains[len - 1];
            } else {
                domainName = serverName;
            }
        }

        if (domainName.indexOf(":") > 0) {
            String[] ary = domainName.split(":");
            domainName = ary[0];
        }
        return domainName;
    }
}
